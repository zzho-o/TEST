1. 구조 분해 할당에 대해 서술하시오.
    배열 혹은 객체에서 값을 쉽게 변수에 할당할 수 있는 문법입니다. 장점으로는 가독성을 높히고 간결한 코드 작성이 가능합니다.
    또 할당을 할 때 서로 다른 길이의 배열일 경우에는 만약 우측의 배열의 길이가 더 짧을경우 왼쪽의 배열에 우측의 길이만큼의 배열에 값을 넣고 그 외에는 undefined가 할당됩니다.
    또한 반대로 우측 배열의 길이가 더 길 경우에는 왼쪽 배열의 길이만큼의 오른쪽 배열의 값을 분해 할당을 진행하고 나머지 값은 무시하게 됩니다.
2. Optional Channing에 대해 서술하고 하위 호환을 위해 어떻게 표기해야 하는지 서술하시오.
    객체에 혹은 배열의 속성에 접근할때 그 속성이 없을 경우 오류를 발생시키지 않고 undefined를 반환합니다. 이것을 통해 API를 이용해 가져온 데이터의 속성이 없거나
    빈 객체일 경우, 안전하게 처리가 가능합니다.
3. 빈 배열에 아래 일련의 과정을 거칠 경우, 배열에 담긴 내용을 작성하시오.
    (a). push('a') //['a']
    (b). shift()   // []
    (c). unshft('e')  // ['e']
    
    push로 배열의 끝에 문자 'a'를 추가한 뒤 shift를 통해 배열의 앞에 있던 데이터를 제거하여 단 빈 배열이 된다. 그 이후 unshft로 문자 'e'를 배열의 앞단에 삽입하여,
    최종 답안은 ['e'] 가 된다.

4. Promise 에 대해 서술하고, Promise 를 사용할 때 주의할 점을 2가지 이상 서술하시오.
    비동기를 간편하게 처리할 수 있도록 해줍니다. 비동기 작업이 완료가 되면 작업 결과 혹은 실패를 나타냅니다.
    상태로는 pending, fullfilled, rejected가 있으며, 맨처음의 객체가 생성될 때 pending 상태에 있으며, 
    작업이 성공을 하면 resolve함수가 호출되어 fullfilled 상태로 변경이 되고, 실패한다면 reject 함수가 호출되어 rejected 상태로 변경됩니다.
    이후의 후속 처리에서 fullilled상태라면 then 메서드가 실행이되고, recjected상태라면 catch 메서드가 실행되어 오류를 처리합니다. 또 finally 메서드도 있는데
    이 메서드는 어떤 결과라도 무조건 실행하게 되어 있습니다.
    주의해야 할 점으로는 
    promiss 내의 에러를 처리하지 않으면 런타임 에러가 발생할 수 있기 때문에 catch를 꼭 추가하는게 좋습니다.
    또한 한번 상태가 변경이 되고 이후의 resolve나 reject 호출은 무시되기 때문에 주의해야 합니다.
